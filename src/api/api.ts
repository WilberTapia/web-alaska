/* tslint:disable */
/* eslint-disable */
/**
 * Alaska API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GaDTO
 */
export interface GaDTO {
    /**
     * 
     * @type {number}
     * @memberof GaDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GaDTO
     */
    'GA': string;
    /**
     * 
     * @type {string}
     * @memberof GaDTO
     */
    'Producto': string;
    /**
     * 
     * @type {string}
     * @memberof GaDTO
     */
    'monto': string;
    /**
     * 
     * @type {string}
     * @memberof GaDTO
     */
    'ano': string;
    /**
     * 
     * @type {string}
     * @memberof GaDTO
     */
    'mes_periodo': string;
}
/**
 * 
 * @export
 * @interface ObjDistPeriodo
 */
export interface ObjDistPeriodo {
    /**
     * 
     * @type {number}
     * @memberof ObjDistPeriodo
     */
    'ID': number;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'CUSTNMBR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'OBJETIVO': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'MES': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'YEAR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'PRODUCTO': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'PRCLEVEL': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'PRECIO_OR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjDistPeriodo
     */
    'PRECIO_META': string;
}
/**
 * 
 * @export
 * @interface ObjectivoGAProductoPeriodo
 */
export interface ObjectivoGAProductoPeriodo {
    /**
     * 
     * @type {number}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'GA': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'Producto': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'monto': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'ano': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectivoGAProductoPeriodo
     */
    'mes_periodo': string;
}
/**
 * 
 * @export
 * @interface ObjetivoDistDTO
 */
export interface ObjetivoDistDTO {
    /**
     * 
     * @type {number}
     * @memberof ObjetivoDistDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'CUSTNMBR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'OBJETIVO': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'MES': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'YEAR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'PRODUCTO': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'PRCLEVEL': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'PRECIO_OR': string;
    /**
     * 
     * @type {string}
     * @memberof ObjetivoDistDTO
     */
    'PRECIO_META': string;
}
/**
 * 
 * @export
 * @interface PROYECCIONCOSTOS
 */
export interface PROYECCIONCOSTOS {
    /**
     * 
     * @type {number}
     * @memberof PROYECCIONCOSTOS
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'LOCALIDAD_P': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'GRUPO_P': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'CUENTA_P': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'PROYECCION': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'PERIODO': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONCOSTOS
     */
    'ANO': string;
}
/**
 * 
 * @export
 * @interface PROYECCIONVENTAS
 */
export interface PROYECCIONVENTAS {
    /**
     * 
     * @type {number}
     * @memberof PROYECCIONVENTAS
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'CODIGO': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'DESCRIPCION': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'CANTIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'MONTO': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'PRECIO_P': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'LOCALIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'ANO': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'MES': string;
    /**
     * 
     * @type {string}
     * @memberof PROYECCIONVENTAS
     */
    'DIA': string;
}
/**
 * 
 * @export
 * @interface PcDTO
 */
export interface PcDTO {
    /**
     * 
     * @type {number}
     * @memberof PcDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'CODIGO': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'DESCRIPCION': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'CANTIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'MONTO': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'PRECIO_P': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'LOCALIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'ANO': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'MES_Periodo': string;
    /**
     * 
     * @type {string}
     * @memberof PcDTO
     */
    'DIA': string;
}
/**
 * 
 * @export
 * @interface ProyeccionVentasPeriodo
 */
export interface ProyeccionVentasPeriodo {
    /**
     * 
     * @type {number}
     * @memberof ProyeccionVentasPeriodo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'CODIGO': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'DESCRIPCION': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'CANTIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'MONTO': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'PRECIO_P': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'LOCALIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'ANO': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'MES_Periodo': string;
    /**
     * 
     * @type {string}
     * @memberof ProyeccionVentasPeriodo
     */
    'DIA': string;
}
/**
 * 
 * @export
 * @interface PvDTO
 */
export interface PvDTO {
    /**
     * 
     * @type {number}
     * @memberof PvDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'CODIGO': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'DESCRIPCION': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'CANTIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'MONTO': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'PRECIO_P': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'LOCALIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'ANO': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'MES_Periodo': string;
    /**
     * 
     * @type {string}
     * @memberof PvDTO
     */
    'DIA': string;
}
/**
 * 
 * @export
 * @interface PvpDTO
 */
export interface PvpDTO {
    /**
     * 
     * @type {number}
     * @memberof PvpDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'CODIGO': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'DESCRIPCION': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'CANTIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'MONTO': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'PRECIO_P': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'LOCALIDAD': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'ANO': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'MES_Periodo': string;
    /**
     * 
     * @type {string}
     * @memberof PvpDTO
     */
    'DIA': string;
}

/**
 * ObjDistPeriodoApi - axios parameter creator
 * @export
 */
export const ObjDistPeriodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerCreate: async (objetivoDistDTO: ObjetivoDistDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objetivoDistDTO' is not null or undefined
            assertParamExists('objetivoDistControllerCreate', 'objetivoDistDTO', objetivoDistDTO)
            const localVarPath = `/objetivoDist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(objetivoDistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerGetPRCLVL: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objetivoDistControllerGetPRCLVL', 'id', id)
            const localVarPath = `/objetivoDist/{id}/prclevel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objetivoDist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objetivoDistControllerShow', 'id', id)
            const localVarPath = `/objetivoDist/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerUpdate: async (id: number, objetivoDistDTO: ObjetivoDistDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objetivoDistControllerUpdate', 'id', id)
            // verify required parameter 'objetivoDistDTO' is not null or undefined
            assertParamExists('objetivoDistControllerUpdate', 'objetivoDistDTO', objetivoDistDTO)
            const localVarPath = `/objetivoDist/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(objetivoDistDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjDistPeriodoApi - functional programming interface
 * @export
 */
export const ObjDistPeriodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjDistPeriodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objetivoDistControllerCreate(objetivoDistDTO: ObjetivoDistDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objetivoDistControllerCreate(objetivoDistDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objetivoDistControllerGetPRCLVL(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objetivoDistControllerGetPRCLVL(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objetivoDistControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjDistPeriodo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objetivoDistControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objetivoDistControllerShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjDistPeriodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objetivoDistControllerShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objetivoDistControllerUpdate(id: number, objetivoDistDTO: ObjetivoDistDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objetivoDistControllerUpdate(id, objetivoDistDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjDistPeriodoApi - factory interface
 * @export
 */
export const ObjDistPeriodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjDistPeriodoApiFp(configuration)
    return {
        /**
         * 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerCreate(objetivoDistDTO: ObjetivoDistDTO, options?: any): AxiosPromise<void> {
            return localVarFp.objetivoDistControllerCreate(objetivoDistDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerGetPRCLVL(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.objetivoDistControllerGetPRCLVL(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerIndex(options?: any): AxiosPromise<Array<ObjDistPeriodo>> {
            return localVarFp.objetivoDistControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerShow(id: number, options?: any): AxiosPromise<ObjDistPeriodo> {
            return localVarFp.objetivoDistControllerShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ObjetivoDistDTO} objetivoDistDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objetivoDistControllerUpdate(id: number, objetivoDistDTO: ObjetivoDistDTO, options?: any): AxiosPromise<void> {
            return localVarFp.objetivoDistControllerUpdate(id, objetivoDistDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjDistPeriodoApi - object-oriented interface
 * @export
 * @class ObjDistPeriodoApi
 * @extends {BaseAPI}
 */
export class ObjDistPeriodoApi extends BaseAPI {
    /**
     * 
     * @param {ObjetivoDistDTO} objetivoDistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjDistPeriodoApi
     */
    public objetivoDistControllerCreate(objetivoDistDTO: ObjetivoDistDTO, options?: AxiosRequestConfig) {
        return ObjDistPeriodoApiFp(this.configuration).objetivoDistControllerCreate(objetivoDistDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjDistPeriodoApi
     */
    public objetivoDistControllerGetPRCLVL(id: number, options?: AxiosRequestConfig) {
        return ObjDistPeriodoApiFp(this.configuration).objetivoDistControllerGetPRCLVL(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjDistPeriodoApi
     */
    public objetivoDistControllerIndex(options?: AxiosRequestConfig) {
        return ObjDistPeriodoApiFp(this.configuration).objetivoDistControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjDistPeriodoApi
     */
    public objetivoDistControllerShow(id: number, options?: AxiosRequestConfig) {
        return ObjDistPeriodoApiFp(this.configuration).objetivoDistControllerShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ObjetivoDistDTO} objetivoDistDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjDistPeriodoApi
     */
    public objetivoDistControllerUpdate(id: number, objetivoDistDTO: ObjetivoDistDTO, options?: AxiosRequestConfig) {
        return ObjDistPeriodoApiFp(this.configuration).objetivoDistControllerUpdate(id, objetivoDistDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ObjectivoGAProductoPeriodoApi - axios parameter creator
 * @export
 */
export const ObjectivoGAProductoPeriodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerCreate: async (gaDTO: GaDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gaDTO' is not null or undefined
            assertParamExists('gaControllerCreate', 'gaDTO', gaDTO)
            const localVarPath = `/Objectivo_GA_Producto_Periodo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Objectivo_GA_Producto_Periodo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gaControllerShow', 'id', id)
            const localVarPath = `/Objectivo_GA_Producto_Periodo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerUpdate: async (id: number, gaDTO: GaDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gaControllerUpdate', 'id', id)
            // verify required parameter 'gaDTO' is not null or undefined
            assertParamExists('gaControllerUpdate', 'gaDTO', gaDTO)
            const localVarPath = `/Objectivo_GA_Producto_Periodo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectivoGAProductoPeriodoApi - functional programming interface
 * @export
 */
export const ObjectivoGAProductoPeriodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectivoGAProductoPeriodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gaControllerCreate(gaDTO: GaDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gaControllerCreate(gaDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gaControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjectivoGAProductoPeriodo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gaControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gaControllerShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectivoGAProductoPeriodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gaControllerShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gaControllerUpdate(id: number, gaDTO: GaDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gaControllerUpdate(id, gaDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectivoGAProductoPeriodoApi - factory interface
 * @export
 */
export const ObjectivoGAProductoPeriodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectivoGAProductoPeriodoApiFp(configuration)
    return {
        /**
         * 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerCreate(gaDTO: GaDTO, options?: any): AxiosPromise<void> {
            return localVarFp.gaControllerCreate(gaDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerIndex(options?: any): AxiosPromise<Array<ObjectivoGAProductoPeriodo>> {
            return localVarFp.gaControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerShow(id: number, options?: any): AxiosPromise<ObjectivoGAProductoPeriodo> {
            return localVarFp.gaControllerShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GaDTO} gaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gaControllerUpdate(id: number, gaDTO: GaDTO, options?: any): AxiosPromise<void> {
            return localVarFp.gaControllerUpdate(id, gaDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectivoGAProductoPeriodoApi - object-oriented interface
 * @export
 * @class ObjectivoGAProductoPeriodoApi
 * @extends {BaseAPI}
 */
export class ObjectivoGAProductoPeriodoApi extends BaseAPI {
    /**
     * 
     * @param {GaDTO} gaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectivoGAProductoPeriodoApi
     */
    public gaControllerCreate(gaDTO: GaDTO, options?: AxiosRequestConfig) {
        return ObjectivoGAProductoPeriodoApiFp(this.configuration).gaControllerCreate(gaDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectivoGAProductoPeriodoApi
     */
    public gaControllerIndex(options?: AxiosRequestConfig) {
        return ObjectivoGAProductoPeriodoApiFp(this.configuration).gaControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectivoGAProductoPeriodoApi
     */
    public gaControllerShow(id: number, options?: AxiosRequestConfig) {
        return ObjectivoGAProductoPeriodoApiFp(this.configuration).gaControllerShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GaDTO} gaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectivoGAProductoPeriodoApi
     */
    public gaControllerUpdate(id: number, gaDTO: GaDTO, options?: AxiosRequestConfig) {
        return ObjectivoGAProductoPeriodoApiFp(this.configuration).gaControllerUpdate(id, gaDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PROYECCIONCOSTOSApi - axios parameter creator
 * @export
 */
export const PROYECCIONCOSTOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerCreate: async (pcDTO: PcDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pcDTO' is not null or undefined
            assertParamExists('pcControllerCreate', 'pcDTO', pcDTO)
            const localVarPath = `/PROYECCION_COSTOS`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pcDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PROYECCION_COSTOS`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pcControllerShow', 'id', id)
            const localVarPath = `/PROYECCION_COSTOS/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerUpdate: async (id: number, pcDTO: PcDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pcControllerUpdate', 'id', id)
            // verify required parameter 'pcDTO' is not null or undefined
            assertParamExists('pcControllerUpdate', 'pcDTO', pcDTO)
            const localVarPath = `/PROYECCION_COSTOS/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pcDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PROYECCIONCOSTOSApi - functional programming interface
 * @export
 */
export const PROYECCIONCOSTOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PROYECCIONCOSTOSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pcControllerCreate(pcDTO: PcDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pcControllerCreate(pcDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pcControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PROYECCIONCOSTOS>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pcControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pcControllerShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PROYECCIONCOSTOS>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pcControllerShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pcControllerUpdate(id: number, pcDTO: PcDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pcControllerUpdate(id, pcDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PROYECCIONCOSTOSApi - factory interface
 * @export
 */
export const PROYECCIONCOSTOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PROYECCIONCOSTOSApiFp(configuration)
    return {
        /**
         * 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerCreate(pcDTO: PcDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pcControllerCreate(pcDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerIndex(options?: any): AxiosPromise<Array<PROYECCIONCOSTOS>> {
            return localVarFp.pcControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerShow(id: number, options?: any): AxiosPromise<PROYECCIONCOSTOS> {
            return localVarFp.pcControllerShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PcDTO} pcDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pcControllerUpdate(id: number, pcDTO: PcDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pcControllerUpdate(id, pcDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PROYECCIONCOSTOSApi - object-oriented interface
 * @export
 * @class PROYECCIONCOSTOSApi
 * @extends {BaseAPI}
 */
export class PROYECCIONCOSTOSApi extends BaseAPI {
    /**
     * 
     * @param {PcDTO} pcDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONCOSTOSApi
     */
    public pcControllerCreate(pcDTO: PcDTO, options?: AxiosRequestConfig) {
        return PROYECCIONCOSTOSApiFp(this.configuration).pcControllerCreate(pcDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONCOSTOSApi
     */
    public pcControllerIndex(options?: AxiosRequestConfig) {
        return PROYECCIONCOSTOSApiFp(this.configuration).pcControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONCOSTOSApi
     */
    public pcControllerShow(id: number, options?: AxiosRequestConfig) {
        return PROYECCIONCOSTOSApiFp(this.configuration).pcControllerShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PcDTO} pcDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONCOSTOSApi
     */
    public pcControllerUpdate(id: number, pcDTO: PcDTO, options?: AxiosRequestConfig) {
        return PROYECCIONCOSTOSApiFp(this.configuration).pcControllerUpdate(id, pcDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PROYECCIONVENTASApi - axios parameter creator
 * @export
 */
export const PROYECCIONVENTASApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerCreate: async (pvDTO: PvDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pvDTO' is not null or undefined
            assertParamExists('pvControllerCreate', 'pvDTO', pvDTO)
            const localVarPath = `/PROYECCION_VENTAS`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pvDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PROYECCION_VENTAS`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pvControllerShow', 'id', id)
            const localVarPath = `/PROYECCION_VENTAS/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerUpdate: async (id: number, pvDTO: PvDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pvControllerUpdate', 'id', id)
            // verify required parameter 'pvDTO' is not null or undefined
            assertParamExists('pvControllerUpdate', 'pvDTO', pvDTO)
            const localVarPath = `/PROYECCION_VENTAS/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pvDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PROYECCIONVENTASApi - functional programming interface
 * @export
 */
export const PROYECCIONVENTASApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PROYECCIONVENTASApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvControllerCreate(pvDTO: PvDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvControllerCreate(pvDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PROYECCIONVENTAS>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvControllerShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PROYECCIONVENTAS>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvControllerShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvControllerUpdate(id: number, pvDTO: PvDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvControllerUpdate(id, pvDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PROYECCIONVENTASApi - factory interface
 * @export
 */
export const PROYECCIONVENTASApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PROYECCIONVENTASApiFp(configuration)
    return {
        /**
         * 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerCreate(pvDTO: PvDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pvControllerCreate(pvDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerIndex(options?: any): AxiosPromise<Array<PROYECCIONVENTAS>> {
            return localVarFp.pvControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerShow(id: number, options?: any): AxiosPromise<PROYECCIONVENTAS> {
            return localVarFp.pvControllerShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PvDTO} pvDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvControllerUpdate(id: number, pvDTO: PvDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pvControllerUpdate(id, pvDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PROYECCIONVENTASApi - object-oriented interface
 * @export
 * @class PROYECCIONVENTASApi
 * @extends {BaseAPI}
 */
export class PROYECCIONVENTASApi extends BaseAPI {
    /**
     * 
     * @param {PvDTO} pvDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONVENTASApi
     */
    public pvControllerCreate(pvDTO: PvDTO, options?: AxiosRequestConfig) {
        return PROYECCIONVENTASApiFp(this.configuration).pvControllerCreate(pvDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONVENTASApi
     */
    public pvControllerIndex(options?: AxiosRequestConfig) {
        return PROYECCIONVENTASApiFp(this.configuration).pvControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONVENTASApi
     */
    public pvControllerShow(id: number, options?: AxiosRequestConfig) {
        return PROYECCIONVENTASApiFp(this.configuration).pvControllerShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PvDTO} pvDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PROYECCIONVENTASApi
     */
    public pvControllerUpdate(id: number, pvDTO: PvDTO, options?: AxiosRequestConfig) {
        return PROYECCIONVENTASApiFp(this.configuration).pvControllerUpdate(id, pvDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProyeccionVentasPeriodoApi - axios parameter creator
 * @export
 */
export const ProyeccionVentasPeriodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerCreate: async (pvpDTO: PvpDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pvpDTO' is not null or undefined
            assertParamExists('pvpControllerCreate', 'pvpDTO', pvpDTO)
            const localVarPath = `/Proyeccion_Ventas_Periodo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pvpDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Proyeccion_Ventas_Periodo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pvpControllerShow', 'id', id)
            const localVarPath = `/Proyeccion_Ventas_Periodo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerUpdate: async (id: number, pvpDTO: PvpDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pvpControllerUpdate', 'id', id)
            // verify required parameter 'pvpDTO' is not null or undefined
            assertParamExists('pvpControllerUpdate', 'pvpDTO', pvpDTO)
            const localVarPath = `/Proyeccion_Ventas_Periodo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pvpDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProyeccionVentasPeriodoApi - functional programming interface
 * @export
 */
export const ProyeccionVentasPeriodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProyeccionVentasPeriodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvpControllerCreate(pvpDTO: PvpDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvpControllerCreate(pvpDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvpControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProyeccionVentasPeriodo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvpControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvpControllerShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProyeccionVentasPeriodo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvpControllerShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pvpControllerUpdate(id: number, pvpDTO: PvpDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pvpControllerUpdate(id, pvpDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProyeccionVentasPeriodoApi - factory interface
 * @export
 */
export const ProyeccionVentasPeriodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProyeccionVentasPeriodoApiFp(configuration)
    return {
        /**
         * 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerCreate(pvpDTO: PvpDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pvpControllerCreate(pvpDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerIndex(options?: any): AxiosPromise<Array<ProyeccionVentasPeriodo>> {
            return localVarFp.pvpControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerShow(id: number, options?: any): AxiosPromise<ProyeccionVentasPeriodo> {
            return localVarFp.pvpControllerShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PvpDTO} pvpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pvpControllerUpdate(id: number, pvpDTO: PvpDTO, options?: any): AxiosPromise<void> {
            return localVarFp.pvpControllerUpdate(id, pvpDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProyeccionVentasPeriodoApi - object-oriented interface
 * @export
 * @class ProyeccionVentasPeriodoApi
 * @extends {BaseAPI}
 */
export class ProyeccionVentasPeriodoApi extends BaseAPI {
    /**
     * 
     * @param {PvpDTO} pvpDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProyeccionVentasPeriodoApi
     */
    public pvpControllerCreate(pvpDTO: PvpDTO, options?: AxiosRequestConfig) {
        return ProyeccionVentasPeriodoApiFp(this.configuration).pvpControllerCreate(pvpDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProyeccionVentasPeriodoApi
     */
    public pvpControllerIndex(options?: AxiosRequestConfig) {
        return ProyeccionVentasPeriodoApiFp(this.configuration).pvpControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProyeccionVentasPeriodoApi
     */
    public pvpControllerShow(id: number, options?: AxiosRequestConfig) {
        return ProyeccionVentasPeriodoApiFp(this.configuration).pvpControllerShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PvpDTO} pvpDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProyeccionVentasPeriodoApi
     */
    public pvpControllerUpdate(id: number, pvpDTO: PvpDTO, options?: AxiosRequestConfig) {
        return ProyeccionVentasPeriodoApiFp(this.configuration).pvpControllerUpdate(id, pvpDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


